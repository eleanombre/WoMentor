import ConfigParser
from flask import Flask
from flask_sqlalchemy import SQLAlchemy

# config importing
config = ConfigParser.ConfigParser()
config.readfp(open('twitoauth.cfg'))
username = config.get('PostgresDB', 'user')
password = config.get('PostgresDB', 'password')
portnum = config.get('PostgresDB', 'port')
dbname = config.get('PostgresDB', 'dbname')

app = Flask(__name__)
# set the database to connect to
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://{}:{}@{}/{}'.format(username, password, portnum, dbname)
db = SQLAlchemy(app)
# db.init_app(app) <- this one works in the flask app but not here/in the CLI, so i'm keeping it as a comment

class User(db.Model):
    uid = db.Column(db.Integer, primary_key=True)
    mentor_mentee = db.Column(db.String(100), nullable=False)
    twitter_handle = db.Column(db.String(20), unique=True, nullable=False)
    offer = db.relationship('Offer', backref='useroffer', lazy='dynamic')
    skills = db.relationship('Skills', backref='skillset', lazy='dynamic')
    languages = db.relationship('Languages', backref='polyglot', lazy='dynamic')

class Offer(db.Model):
    oid = db.Column(db.Integer, primary_key=True)
    offer_1 = db.Column(db.String(100))
    offer_2 = db.Column(db.String(100))
    offer_3 = db.Column(db.String(100))
    user_id = db.Column(db.Integer, db.ForeignKey('user.uid'))

class Skills(db.Model):
    oid = db.Column(db.Integer, primary_key=True)
    skills_1 = db.Column(db.String(100))
    skills_2 = db.Column(db.String(100))
    skills_3 = db.Column(db.String(100))
    skills_4 = db.Column(db.String(100))
    user_id = db.Column(db.Integer, db.ForeignKey('user.uid'))

class Languages(db.Model):
    oid = db.Column(db.Integer, primary_key=True)
    languages_1 = db.Column(db.String(100))
    languages_2 = db.Column(db.String(100))
    languages_3 = db.Column(db.String(100))
    languages_4 = db.Column(db.String(100))
    user_id = db.Column(db.Integer, db.ForeignKey('user.uid'))

# this line of code creates all the tables that are specified above, this only needs to be run once to create the tables initially and after that SQLAlchemy will just connect so you can comment it out
db.create_all()
# this section adds a new user, the user id is autogenerated and sequential
newuser = User(mentor_mentee="mentee", twitter_handle="fluffyunicorn")
db.session.add(newuser)
db.session.commit()
print "Committed new user"

# this section adds what the user is offering/seeking
offersofuser = Offer(offer_1="career advice", offer_2="project help", offer_3="getting started", useroffer=newuser)
db.session.add(offersofuser)
db.session.commit()
print "Added user offers"

#this section adds what skills the user has
skillsofuser = Skills(skills_1="node.js", skills_2="flask", skills_3="jinja", skills_4="project management", skillset=newuser)
db.session.add(skillsofuser)
db.session.commit()
print "Added user skills"

#this section adds the languages the user has
languagesofuser = Languages(languages_1="javascript", languages_2="haskell", languages_3="python", languages_4="ruby", polyglot=newuser)
db.session.add(languagesofuser)
db.session.commit()
print "Added user languages"

# ***** BELOW IS ANOTHER EXAMPLE WHICH LEAVES CERTAIN FIELDS BLANK/NULL *****
newuser = User(mentor_mentee="mentee", twitter_handle="happyrainbowpony")
db.session.add(newuser)
db.session.commit()
print "Committed new user"

# this section adds what the user is offering/seeking
offersofuser = Offer(offer_1="getting started", useroffer=newuser)
db.session.add(offersofuser)
db.session.commit()
print "Added user offers"

#this section adds what skills the user has
skillsofuser = Skills(skills_1="node.js", skills_2="flask", skillset=newuser)
db.session.add(skillsofuser)
db.session.commit()
print "Added user skills"

#this section adds the languages the user has
languagesofuser = Languages(languages_1="javascript", languages_2="haskell", polyglot=newuser)
db.session.add(languagesofuser)
db.session.commit()
print "Added user languages"
